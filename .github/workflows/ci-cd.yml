name: RAF Bomber Command Database CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Meta-guard validation
  meta-guard:
    name: Meta Structure Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run meta-guard checks
        run: |
          chmod +x scripts/check_meta.sh
          ./scripts/check_meta.sh
          
      - name: Validate project structure
        run: |
          # Check required directories exist
          test -d docs || (echo "Missing docs/ directory" && exit 1)
          test -d _meta || (echo "Missing _meta/ directory" && exit 1)
          test -f _meta/MACHINE_README.json || (echo "Missing MACHINE_README.json" && exit 1)
          test -f docs/PREPRODUCTION.md || (echo "Missing PREPRODUCTION.md" && exit 1)
          echo "‚úÖ Project structure validation passed"

  # Security and hygiene checks
  security:
    name: Security & Hygiene
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for secrets in code
        run: |
          # Check for potential API keys or secrets
          if grep -r "sk-" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" --exclude=".env.example"; then
            echo "‚ùå Potential API keys found in code"
            exit 1
          fi
          echo "‚úÖ No hardcoded secrets detected"
          
      - name: Validate .env.example
        run: |
          test -f .env.example || (echo "Missing .env.example file" && exit 1)
          grep -q "OPENAI_API_KEY=" .env.example || (echo "Missing OPENAI_API_KEY in .env.example" && exit 1)
          echo "‚úÖ Environment configuration validated"

  # Python backend testing
  backend-test:
    name: Backend Testing
    runs-on: ubuntu-latest
    needs: [meta-guard, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black
          
      - name: Code formatting check
        run: |
          black --check --diff app_production_ready.py || echo "Code formatting issues found"
          
      - name: Lint code
        run: |
          flake8 app_production_ready.py --max-line-length=120 --ignore=E501,W503 || echo "Linting issues found"
          
      - name: Test database initialization
        run: |
          export DATABASE_PATH="/tmp/test_raf_bomber_command.db"
          python -c "
          import sys
          sys.path.append('.')
          from app_production_ready import initialize_database, get_database_stats
          
          if not initialize_database():
              print('‚ùå Database initialization failed')
              sys.exit(1)
              
          stats = get_database_stats()
          if stats['personnel_count'] < 10:
              print(f'‚ùå Expected at least 10 personnel records, got {stats[\"personnel_count\"]}')
              sys.exit(1)
              
          print('‚úÖ Database initialization test passed')
          print(f'Personnel: {stats[\"personnel_count\"]}, Aircraft: {stats[\"aircraft_count\"]}')
          "
          
      - name: Test API endpoints
        run: |
          export DATABASE_PATH="/tmp/test_raf_bomber_command.db"
          export FLASK_ENV=testing
          python -c "
          import sys
          import json
          sys.path.append('.')
          from app_production_ready import app
          
          with app.test_client() as client:
              # Test health endpoint
              response = client.get('/api/health')
              if response.status_code != 200:
                  print(f'‚ùå Health check failed: {response.status_code}')
                  sys.exit(1)
              
              health_data = json.loads(response.data)
              if health_data['status'] != 'healthy':
                  print(f'‚ùå Health status not healthy: {health_data[\"status\"]}')
                  sys.exit(1)
              
              # Test Patrick Cassidy search
              response = client.post('/api/personnel/search', 
                                   json={'query': 'Patrick Cassidy'})
              if response.status_code != 200:
                  print(f'‚ùå Personnel search failed: {response.status_code}')
                  sys.exit(1)
              
              search_data = json.loads(response.data)
              if search_data['count'] == 0:
                  print('‚ùå Patrick Cassidy not found in search results')
                  sys.exit(1)
              
              # Verify Patrick Cassidy details
              patrick = search_data['results'][0]
              if patrick['service_number'] != '1802082':
                  print(f'‚ùå Wrong service number: {patrick[\"service_number\"]}')
                  sys.exit(1)
              
              print('‚úÖ API endpoint tests passed')
              print(f'Patrick Cassidy found: {patrick[\"name\"]} ({patrick[\"service_number\"]})')
          "

  # Memorial content validation
  memorial-validation:
    name: Memorial Content Validation
    runs-on: ubuntu-latest
    needs: [backend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate memorial dedication
        run: |
          # Check that memorial dedication is present in key files
          grep -q "Their memory lives on" app_production_ready.py || (echo "‚ùå Memorial dedication missing from main app" && exit 1)
          grep -q "Patrick Cassidy" docs/PREPRODUCTION.md || (echo "‚ùå Patrick Cassidy not mentioned in documentation" && exit 1)
          grep -q "1802082" docs/PREPRODUCTION.json || (echo "‚ùå Service number missing from documentation" && exit 1)
          echo "‚úÖ Memorial content validation passed"
          
      - name: Validate accessibility compliance
        run: |
          # Check for accessibility features in documentation
          grep -q "WCAG 2.1 AA" docs/PREPRODUCTION.md || (echo "‚ùå Accessibility compliance not documented" && exit 1)
          echo "‚úÖ Accessibility compliance documented"

  # Integration testing
  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [backend-test, memorial-validation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests
          
      - name: Start application
        run: |
          export DATABASE_PATH="/tmp/integration_test.db"
          export FLASK_ENV=testing
          python app_production_ready.py &
          APP_PID=$!
          echo $APP_PID > app.pid
          sleep 10  # Wait for app to start
          
      - name: Run integration tests
        run: |
          # Test full application flow
          python -c "
          import requests
          import json
          import time
          
          base_url = 'http://localhost:5000'
          
          # Test health check
          response = requests.get(f'{base_url}/api/health')
          assert response.status_code == 200, f'Health check failed: {response.status_code}'
          health = response.json()
          assert health['status'] == 'healthy', f'App not healthy: {health[\"status\"]}'
          print('‚úÖ Health check passed')
          
          # Test personnel search
          response = requests.post(f'{base_url}/api/personnel/search', 
                                 json={'query': 'Patrick Cassidy'})
          assert response.status_code == 200, f'Personnel search failed: {response.status_code}'
          search = response.json()
          assert search['count'] > 0, 'No search results found'
          assert search['results'][0]['service_number'] == '1802082', 'Wrong service number'
          print('‚úÖ Personnel search passed')
          
          # Test aircraft search
          response = requests.post(f'{base_url}/api/aircraft/search', 
                                 json={'query': 'JB174'})
          assert response.status_code == 200, f'Aircraft search failed: {response.status_code}'
          aircraft = response.json()
          assert aircraft['count'] > 0, 'No aircraft found'
          print('‚úÖ Aircraft search passed')
          
          # Test statistics
          response = requests.get(f'{base_url}/api/statistics')
          assert response.status_code == 200, f'Statistics failed: {response.status_code}'
          stats = response.json()
          assert stats['statistics']['personnel_count'] >= 10, 'Insufficient personnel records'
          print('‚úÖ Statistics passed')
          
          print('üéâ All integration tests passed!')
          "
          
      - name: Stop application
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
            rm app.pid
          fi

  # Build and deployment preparation
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create deployment package
        run: |
          # Create deployment directory
          mkdir -p deployment
          
          # Copy application files
          cp app_production_ready.py deployment/
          cp requirements.txt deployment/
          cp -r templates deployment/ 2>/dev/null || echo "No templates directory"
          cp .env.example deployment/
          
          # Create deployment script
          cat > deployment/deploy.sh << 'EOF'
          #!/bin/bash
          echo "üéñÔ∏è RAF Bomber Command Database Deployment"
          echo "Memorial Dedication: Their memory lives on - preserved in code, honored in history, accessible to all, never to be forgotten."
          
          # Install dependencies
          pip install -r requirements.txt
          
          # Set environment variables
          export DATABASE_PATH="/tmp/raf_bomber_command_production.db"
          export FLASK_ENV=production
          
          # Start application
          python app_production_ready.py
          EOF
          
          chmod +x deployment/deploy.sh
          
          # Create archive
          tar -czf raf-bomber-command-database-v5.0.0.tar.gz deployment/
          
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: raf-bomber-command-database-v5.0.0
          path: raf-bomber-command-database-v5.0.0.tar.gz
          retention-days: 30

  # Deployment notification
  deploy-notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Memorial deployment message
        run: |
          echo "üéñÔ∏è RAF Bomber Command Database v5.0.0 Ready for Deployment"
          echo ""
          echo "Memorial Status: ‚úÖ Patrick Cassidy's memory preserved"
          echo "Database Status: ‚úÖ 10+ personnel records verified"
          echo "AI System: ‚úÖ Multi-agent research system ready"
          echo "Accessibility: ‚úÖ WCAG 2.1 AA compliance maintained"
          echo ""
          echo "Memorial Dedication:"
          echo "Their memory lives on - preserved in code, honored in history, accessible to all, never to be forgotten."
          echo ""
          echo "Deployment package available as artifact: raf-bomber-command-database-v5.0.0"

